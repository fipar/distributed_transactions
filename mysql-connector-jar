package xademo;

import com.mysql.jdbc.jdbc2.optional.MysqlXADataSource;
import com.mysql.jdbc.jdbc2.optional.MysqlXid;
import java.sql.Connection;
import java.sql.Statement;
import javax.sql.XAConnection;
import javax.transaction.xa.XAException;
import javax.transaction.xa.XAResource;
import javax.transaction.xa.Xid;

public class Sample {
  public static void main(String[] args) throws Exception {
    MysqlXADataSource mysqlDSOne = new MysqlXADataSource();
    mysqlDSOne.setServerName("127.0.0.1");
    mysqlDSOne.setDatabaseName("xasource1");
    mysqlDSOne.setUser("banker");
    mysqlDSOne.setPassword("banker");

    MysqlXADataSource mysqlDSTwo = new MysqlXADataSource();
    mysqlDSTwo.setServerName("127.0.0.1");
    mysqlDSTwo.setDatabaseName("xasource2");
    mysqlDSTwo.setUser("banker");
    mysqlDSTwo.setPassword("banker");
    XAConnection xa1 = mysqlDSOne.getXAConnection();
    XAConnection xa2 = mysqlDSTwo.getXAConnection();
    Connection conn1 = xa1.getConnection();
    Connection conn2 = xa2.getConnection();
    XAResource xar1 = xa1.getXAResource();
    XAResource xar2 = xa2.getXAResource();
    Xid xid1 = createXid(1);
    Xid xid2 = createXid(2);
    xar1.start (xid1, XAResource.TMNOFLAGS);
    xar2.start (xid2, XAResource.TMNOFLAGS);

    // Send $10.00 from user 1 to user 2
    withdrawFunds(1, 1000, conn1, 2);
    depositFunds(1, 1000, conn2, 2);

    // END both the branches -- THIS IS MUST
    xar1.end(xid1, XAResource.TMSUCCESS);
    xar2.end(xid2, XAResource.TMSUCCESS);

    // Prepare the RMs
    int prp1 =  xar1.prepare (xid1);
    int prp2 =  xar2.prepare (xid2);

    System.out.println("Return value of prepare 1 is " + prp1);
    System.out.println("Return value of prepare 2 is " + prp2);

    boolean do_commit = true;

    if (!((prp1 == XAResource.XA_OK) || (prp1 == XAResource.XA_RDONLY)))
      do_commit = false;

    if (!((prp2 == XAResource.XA_OK) || (prp2 == XAResource.XA_RDONLY)))
      do_commit = false;

    System.out.println("do_commit is " + do_commit);
    System.out.println("Is oxar1 same as oxar2 ? " +
xar1.isSameRM(xar2));

    if (prp1 == XAResource.XA_OK)
      if (do_commit)
        xar1.commit (xid1, false);
      else
        xar1.rollback (xid1);

    if (prp2 == XAResource.XA_OK)
      if (do_commit)
        xar2.commit (xid2, false);
      else
        xar2.rollback (xid2);

    // Close connections
    conn1.close();
    conn1 = null;
    conn2.close();
    conn2 = null;

    xa1.close();
    xa1 = null;
    xa2.close();
    xa2 = null;
  }

  static Xid createXid(int bids)
      throws XAException
  {
    byte[] gid = new byte[1]; gid[0]= (byte) 9;
    byte[] bid = new byte[1]; bid[0]= (byte) bids;
    byte[] gtrid = new byte[64];
    byte[] bqual = new byte[64];
    System.arraycopy (gid, 0, gtrid, 0, 1);
    System.arraycopy (bid, 0, bqual, 0, 1);
    Xid xid = new MysqlXid(gtrid, bqual, 0x1234);
    return xid;
  }

  private static void withdrawFunds(int userId, long amount,
Connection connection, int receivingUserId) throws Exception {
    Statement stmt = connection.createStatement();
    int rows = stmt.executeUpdate("insert into
transactions(transaction_date,source_user_id,destination_user_id,
amount_transferred)"
                        +" values (now(),
"+userId+","+receivingUserId+","+amount+")");
    if (rows != 1) {
      throw new UnsupportedOperationException("Unable to insert into
transaction table");
    }
    stmt.executeUpdate("update users set
current_balance=current_balance-"+amount+" where id="+userId);
  }

  private static void depositFunds(int userId, long amount, Connection
connection, int receivingUserId) throws Exception {
    Statement stmt = connection.createStatement();
    int rows = stmt.executeUpdate("insert into
transactions(transaction_date,source_user_id,destination_user_id,
amount_transferred)"
        +" values (now(), "+userId+","+receivingUserId+","+amount+")");
    if (rows != 1) {
      throw new UnsupportedOperationException("Unable to insert into
transaction table");
    }
    stmt.executeUpdate("update users set
current_balance=current_balance+"+amount+" where
id="+receivingUserId);
  }

}

